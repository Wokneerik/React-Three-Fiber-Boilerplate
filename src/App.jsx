import { Html, OrbitControls, Stats, useGLTF } from '@react-three/drei'
import { Canvas, useFrame } from '@react-three/fiber'
import React, { Suspense, useRef } from 'react'
import { TextureLoader } from 'three'

const Models = [{ url: './models/Town.glb' }]

const data =
  ''
const textureUrl = `data:image/jpeg;base64, ${data}`

function Model({ url, position }) {
  const { scene } = useGLTF(url)

  return <primitive object={scene.clone()} position={position} />
}

function TexturedRectangularObject({ position }) {
  const texture = new TextureLoader().load(textureUrl)

  return (
    <mesh position={position}>
      <sphereGeometry attach="geometry" args={[5, 32, 16]} />
      <meshBasicMaterial attach="material" map={texture} />
    </mesh>
  )
}

function DuplicatedModelsAndRectangularObjects() {
  const group = useRef()

  useFrame(() => {
    group.current.rotation.y += 0.0001
  })

  const numModels = 12
  const numRows = 3
  const numCols = 4
  const distanceBetweenModels = 18
  const liftHeight = 9

  return (
    <group ref={group}>
      {/* GLB Models */}
      {Array.from({ length: numModels }).map((_, index) => {
        const rowIndex = Math.floor(index / numCols)
        const colIndex = index % numRows
        return (
          <Model
            key={`model-${index}`}
            url={Models[0].url}
            position={[colIndex * distanceBetweenModels, 0, rowIndex * 15]}
          />
        )
      })}

      {Array.from({ length: numModels }).map((_, index) => {
        const rowIndex = Math.floor(index / numCols)
        const colIndex = index % numRows
        return (
          <TexturedRectangularObject
            key={`rectObject-${index}`}
            position={[
              colIndex * distanceBetweenModels,
              liftHeight,
              rowIndex * 15
            ]}
          />
        )
      })}
    </group>
  )
}

export default function App() {
  return (
    <>
      <Canvas
        shadows
        camera={{
          fov: 64,
          position: [-200, 200, -200]
        }}>
        <ambientLight intensity={1.3} />
        <directionalLight position={[10, 10, 5]} intensity={1} />
        <directionalLight position={[-1000, 1, 100]} intensity={2} castShadow />
        <spotLight intensity={1} position={[100, -100, 100]} />
        <spotLight intensity={1000} position={[-100, 1000, -100]} />
        <spotLight intensity={1000} position={[-180, 100, -100]} />

        <Suspense fallback={<Html center>Loading...</Html>}>
          <DuplicatedModelsAndRectangularObjects />
        </Suspense>

        <OrbitControls
          autoRotate={true}
          enableZoom={true}
          autoRotateSpeed={0.5}
          maxPolarAngle={Math.PI / 2}
          minPolarAngle={0}
          minDistance={2}
          maxDistance={38}
        />

        <Stats />
      </Canvas>
    </>
  )
}
